'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.App = undefined;

var _express = require('express');

var _express2 = _interopRequireDefault(_express);

var _morgan = require('morgan');

var _morgan2 = _interopRequireDefault(_morgan);

var _bodyParser = require('body-parser');

var _bodyParser2 = _interopRequireDefault(_bodyParser);

var _config = require('./config');

var _config2 = _interopRequireDefault(_config);

var _control = require('./api/control');

var _sourcesParser = require('./core/sources-parser');

var _sourcesRouter = require('./core/sources-router');

var _recording = require('./api/recording');

var _apiRecorder = require('./api/recording/api-recorder');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const { isLogEnabled } = _config2.default;

class App {
  constructor(sources, serverConfig) {
    this.parser = new _sourcesParser.SourcesParser(sources);
    this.apiUrl = this.getApiUrl(serverConfig);
    this.app = (0, _express2.default)();

    console.log('******* CONFIG **********'.yellow);

    this.initMiddleware();
    this.initControlApi();
    this.initMocks();
  }

  initMiddleware() {
    this.app.use(_bodyParser2.default.json());
    this.app.use((0, _apiRecorder.apiRecorder)(this.apiUrl));
    this.initLogger();
  }

  initMocks() {
    const router = new _sourcesRouter.SourcesRouter(this.parser);
    router.registerSources(this.app, isLogEnabled);
  }

  /**
   *  Method to start logger of requests
   *    Actual format
   *      0.230 ms GET 200 /some/url/
   *    More option
   *      https://github.com/expressjs/morgan
   */
  initLogger() {
    if (isLogEnabled) {
      this.app.use((0, _morgan2.default)(':response-time ms :method :status :url'));
    }
  }

  initControlApi() {
    this.app.use(this.apiUrl, (0, _control.controlApi)(this.parser));
    this.app.use(this.apiUrl, (0, _recording.recordingApi)());
  }

  getApiUrl({ controlApiUrl } = {}) {
    return controlApiUrl ? controlApiUrl : '/api/v1';
  }

  start(port, callback) {
    return this.app.listen(port, callback);
  }
}
exports.App = App;
//# sourceMappingURL=app.js.map