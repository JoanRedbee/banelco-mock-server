{"version":3,"sources":["../../../lib/core/matchers/http-post-matcher.js"],"names":["matchRecordPost","req","bundle","matches","sort","a","b","result","compare","requestBody","body","searchedRecord","searchedRecordDefault","searchedRecordRegex","forEach","record","type","value","re","RegExp","str","JSON","stringify","match","isMatched","matchType","recordBodyValue","parse","Object","keys","key","isRequestBodyEmpty"],"mappings":"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","file":"http-post-matcher.js","sourcesContent":["import { getMatchesByQueryString } from './query-string-matcher';\n\n/**\n * TODO refaktor jako v getu do MatchItem\n */\nexport const matchRecordPost = (req, bundle) => {\n  let matches = getMatchesByQueryString(req, bundle);\n  matches.sort((a, b) => {\n    return b.result.compare(a.result);\n  });\n\n  let requestBody = req.body;\n\n  // console.log('***********');\n  // console.log(requestBody);\n  // console.log('=========== matches count: '+matches.length);\n  // myLog(matches);\n  // console.log('..................');\n\n  let searchedRecord = null;\n  let searchedRecordDefault = null;\n  let searchedRecordRegex = null;\n  matches.forEach(({ record }) => {\n    let { body } = record;\n    if (!!body) {\n      if (!!body.type && !!body.value) {\n        switch (body.type) {\n          case 'REGEX': {\n            let value = body.value;\n\n            var re = new RegExp(value, 'g');\n            var str = JSON.stringify(requestBody);\n            var result = str.match(re);\n            // console.log('+++++++++++++');\n            // console.log(str);\n            // console.log(value);\n            // console.log(result);\n\n            let isMatched = !!result;\n            if (isMatched && !searchedRecordRegex) {\n              searchedRecordRegex = record;\n            }\n            // console.log('REGEX '+!!result);\n            break;\n          }\n          case 'JSON': {\n            // match only filled\n            if (body.matchType && body.matchType === 'ONLY_MATCHING_FIELDS') {\n              let recordBodyValue = JSON.parse(body.value);\n\n              // let requestBodyKeysLength = Object.keys(requestBody).length;\n              // let recordBodyKeysLength = Object.keys(recordBodyValue).length;\n              // if(requestBodyKeysLength === recordBodyKeysLength){\n              let isMatched = true;\n              Object.keys(recordBodyValue).forEach(key => {\n                let value = recordBodyValue[key];\n                if (\n                  JSON.stringify(value) !== JSON.stringify(requestBody[key])\n                ) {\n                  isMatched = false;\n                }\n              });\n              if (isMatched && !searchedRecord) {\n                searchedRecord = record;\n              }\n              // console.log('TEST FOR MATCH = '+isMatched);\n              // }else{\n              // console.log('NO MATCH');\n              // }\n              break; // break only if type is ONLY_MATCHING_FIELDS\n            }\n          }\n          case 'STRING':\n          default: {\n            // exact match\n            // console.log('******');\n            // console.log(body.value);\n            // console.log('------------');\n            // console.log(JSON.stringify(requestBody));\n            // console.log('=============');\n            // console.log(body.value === JSON.stringify(requestBody));\n\n            let isMatched = body.value === JSON.stringify(requestBody);\n            if (isMatched && !searchedRecord) {\n              searchedRecord = record;\n            }\n            // console.log('EXACT DEFAULT '+isMatched);\n          }\n        }\n      } else {\n        let isMatched = body === JSON.stringify(requestBody);\n        if (isMatched && !searchedRecord) {\n          searchedRecord = record;\n        }\n        // console.log('EXACT');\n        // exact match\n      }\n    } else {\n      let isRequestBodyEmpty =\n        !requestBody || JSON.stringify(requestBody) === '{}';\n      // console.log('ELSE');\n      // console.log('isRequestBodyEmpty '+isRequestBodyEmpty);\n      // console.log(requestBody);\n      if (isRequestBodyEmpty && !searchedRecord) {\n        searchedRecord = record;\n      } else if (!searchedRecordDefault) {\n        searchedRecordDefault = record;\n      }\n    }\n\n    // myLog(record);\n  });\n\n  if (!searchedRecord) {\n    searchedRecord = searchedRecordRegex;\n  }\n  if (!searchedRecord) {\n    searchedRecord = searchedRecordDefault;\n  }\n\n  // console.log('POST RESULT'.yellow);\n  // console.log(JSON.stringify(searchedRecord, null, \"  \"));\n  return searchedRecord;\n};\n"]}