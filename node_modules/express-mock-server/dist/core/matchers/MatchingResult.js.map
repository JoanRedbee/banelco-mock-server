{"version":3,"sources":["../../../lib/core/matchers/MatchingResult.js"],"names":["MATCH_TYPE","STRICT","SUBSET","DEFAULT","NO","MatchingResult","constructor","type","countOfMatches","countOfMatchesUnspecific","count","countUnspecific","isDefault","isStrict","isNo","isSubset","compare","other","print","toPrint","console","log","bgBlue","white","MATCH_NO","MATCH_STRICT","MATCH_DEFAULT"],"mappings":";;;;;AAAO,MAAMA,kCAAa;AACxBC,UAAQ,QADgB;AAExBC,UAAQ,QAFgB,EAEN;AAClBC,WAAS,SAHe,EAGJ;AACpBC,MAAI;AAJoB,CAAnB;;AAOP;;;AAGA,MAAMC,cAAN,CAAqB;AACnBC,cAAYC,IAAZ,EAAkBC,iBAAiB,IAAnC,EAAyCC,2BAA2B,IAApE,EAA0E;AACxE,SAAKF,IAAL,GAAYA,IAAZ;AACA,SAAKG,KAAL,GAAaF,cAAb;AACA,SAAKG,eAAL,GAAuBF,wBAAvB;AACD;;AAEDG,cAAY;AACV,WAAO,KAAKL,IAAL,KAAcP,WAAWG,OAAhC;AACD;AACDU,aAAW;AACT,WAAO,KAAKN,IAAL,KAAcP,WAAWC,MAAhC;AACD;AACDa,SAAO;AACL,WAAO,KAAKP,IAAL,KAAcP,WAAWI,EAAhC;AACD;AACDW,aAAW;AACT,WAAO,KAAKR,IAAL,KAAcP,WAAWE,MAAhC;AACD;;AAED;;;;;;;;;AASAc,UAAQC,KAAR,EAAe;AACb,QAAIA,MAAMV,IAAN,KAAe,KAAKA,IAAxB,EAA8B;AAC5B,UAAI,KAAKQ,QAAL,EAAJ,EAAqB;AACnB,YAAI,KAAKL,KAAL,KAAeO,MAAMP,KAAzB,EAAgC;AAC9B,iBAAO,KAAKC,eAAL,GAAuBM,MAAMN,eAApC;AACD,SAFD,MAEO;AACL,iBAAO,KAAKD,KAAL,GAAaO,MAAMP,KAA1B;AACD;AACF,OAND,MAMO;AACL,eAAO,CAAP;AACD;AACF,KAVD,MAUO;AACL,UAAI,KAAKG,QAAL,EAAJ,EAAqB,OAAO,CAAP;AACrB,UAAII,MAAMJ,QAAN,EAAJ,EAAsB,OAAO,CAAC,CAAR;AACtB,UAAI,KAAKC,IAAL,EAAJ,EAAiB,OAAO,CAAC,CAAR;AACjB,UAAIG,MAAMH,IAAN,EAAJ,EAAkB,OAAO,CAAP;AAClB,UAAI,KAAKC,QAAL,MAAmBE,MAAML,SAAN,EAAvB,EAA0C,OAAO,CAAP;AAC1C,UAAI,KAAKA,SAAL,MAAoBK,MAAMF,QAAN,EAAxB,EAA0C,OAAO,CAAC,CAAR;AAC3C;AACF;;AAED;;;AAGAG,UAAQ;AACN,QAAIC,UAAU,0BAA0B,KAAKZ,IAA7C;AACA,QAAI,KAAKG,KAAL,KAAe,IAAnB,EAAyB;AACvBS,iBAAW,eAAe,KAAKT,KAA/B;AACD;AACD,QAAI,KAAKC,eAAL,KAAyB,IAA7B,EAAmC;AACjCQ,iBAAW,wBAAwB,KAAKR,eAAxC;AACD;AACDS,YAAQC,GAAR,CAAYF,QAAQG,MAAR,CAAeC,KAA3B;AACD;AA9DkB;;AAiEd,MAAMC,8BAAW,IAAInB,cAAJ,CAAmBL,WAAWI,EAA9B,CAAjB;AACA,MAAMqB,sCAAe,IAAIpB,cAAJ,CAAmBL,WAAWC,MAA9B,CAArB;AACA,MAAMyB,wCAAgB,IAAIrB,cAAJ,CAAmBL,WAAWG,OAA9B,CAAtB;;kBAEQE,c","file":"MatchingResult.js","sourcesContent":["export const MATCH_TYPE = {\n  STRICT: 'strict',\n  SUBSET: 'subset', //  some QS match\n  DEFAULT: 'default', //  request have QS but bundle doesnt\n  NO: 'no'\n};\n\n/**\n *\n */\nclass MatchingResult {\n  constructor(type, countOfMatches = null, countOfMatchesUnspecific = null) {\n    this.type = type;\n    this.count = countOfMatches;\n    this.countUnspecific = countOfMatchesUnspecific;\n  }\n\n  isDefault() {\n    return this.type === MATCH_TYPE.DEFAULT;\n  }\n  isStrict() {\n    return this.type === MATCH_TYPE.STRICT;\n  }\n  isNo() {\n    return this.type === MATCH_TYPE.NO;\n  }\n  isSubset() {\n    return this.type === MATCH_TYPE.SUBSET;\n  }\n\n  /**\n   *            STRICT SUBSET DEFAULT NO\n   *  STRICT      0      1      1      1\n   *  SUBSET      -1     c      1      1\n   *  DEFAULT     -1     -1     0      1\n   *  NO          -1     -1     -1     0\n   *  @param {MatchingResult} other\n   *  @return {number}\n   */\n  compare(other) {\n    if (other.type === this.type) {\n      if (this.isSubset()) {\n        if (this.count === other.count) {\n          return this.countUnspecific - other.countUnspecific;\n        } else {\n          return this.count - other.count;\n        }\n      } else {\n        return 0;\n      }\n    } else {\n      if (this.isStrict()) return 1;\n      if (other.isStrict()) return -1;\n      if (this.isNo()) return -1;\n      if (other.isNo()) return 1;\n      if (this.isSubset() && other.isDefault()) return 1;\n      if (this.isDefault() && other.isSubset()) return -1;\n    }\n  }\n\n  /**\n   *  Just develop tool\n   */\n  print() {\n    let toPrint = 'MatchingResult type: ' + this.type;\n    if (this.count !== null) {\n      toPrint += ', counts: ' + this.count;\n    }\n    if (this.countUnspecific !== null) {\n      toPrint += ', countUnspecific: ' + this.countUnspecific;\n    }\n    console.log(toPrint.bgBlue.white);\n  }\n}\n\nexport const MATCH_NO = new MatchingResult(MATCH_TYPE.NO);\nexport const MATCH_STRICT = new MatchingResult(MATCH_TYPE.STRICT);\nexport const MATCH_DEFAULT = new MatchingResult(MATCH_TYPE.DEFAULT);\n\nexport default MatchingResult;\n"]}