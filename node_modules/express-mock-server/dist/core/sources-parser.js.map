{"version":3,"sources":["../../lib/core/sources-parser.js"],"names":["isLogEnabled","Record","constructor","record","__record","queryStringParameters","request","body","response","SourcesParser","sources","generateMapFromSources","getMap","map","resetMap","GENERATE_TITLE","console","time","forEach","source","setSource","sortMap","timeEnd","setRecord","switchRecord","SET_NEW_REC","method","path","isChanged","changedRecord","index","isQueryStringEqual","JSON","stringify","push","Object","keys","pathItem","gets","GET","sort","compare","posts","POST","puts","PUT","deletes","DELETE","patches","PATCH","qs1","qs2","length","isEqual","qs1ref","qs2ref","item","name","values","qs2Values","value","indexOf","a","b","aSpecificCount","bSpecificCount","qs"],"mappings":"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","file":"sources-parser.js","sourcesContent":["import { methods, REG_ALL } from './../constants';\nimport config from './../config';\n\nconst { isLogEnabled } = config;\n\nclass Record {\n  constructor(record) {\n    this.__record = record;\n    this.queryStringParameters = record.request.queryStringParameters;\n    this.body = record.request.body;\n    this.response = record.response;\n  }\n}\n\n/**\n *  Class for handling sources\n */\nexport class SourcesParser {\n  constructor(sources) {\n    this.sources = sources;\n    this.generateMapFromSources(sources);\n  }\n\n  /**\n   *  @public\n   *  @return {!Object}\n   */\n  getMap() {\n    return this.map;\n  }\n\n  /**\n   *  @public\n   */\n  resetMap() {\n    this.generateMapFromSources(this.sources);\n  }\n\n  /**\n   *  Method to initialize sources to map\n   *  @param {Object} sources\n   */\n  generateMapFromSources(sources) {\n    const GENERATE_TITLE = 'Generate original map from sources';\n    if (isLogEnabled) {\n      console.time(GENERATE_TITLE);\n    }\n\n    this.map = {};\n    sources.forEach(source => {\n      this.setSource(this.map, source);\n    });\n    this.sortMap();\n\n    if (isLogEnabled) {\n      console.timeEnd(GENERATE_TITLE);\n    }\n  }\n\n  /**\n   *\n   */\n  setSource(map, source) {\n    source.forEach(record => {\n      this.setRecord(map, record);\n    });\n  }\n\n  /**\n   *\n   */\n  switchRecord(record) {\n    const SET_NEW_REC = 'Set new record';\n    if (isLogEnabled) console.time(SET_NEW_REC);\n    let { method, path, queryStringParameters, body } = record.request;\n    let isChanged = false;\n    this.map[path][method].forEach((changedRecord, index) => {\n      // console.log('**************'.blue);\n      // console.log(JSON.stringify(body));\n      // console.log(JSON.stringify(changedRecord.body));\n      // console.log(JSON.stringify(body) == JSON.stringify(changedRecord.body));\n      if (\n        isQueryStringEqual(\n          queryStringParameters,\n          changedRecord.queryStringParameters\n        ) &&\n        JSON.stringify(body) === JSON.stringify(changedRecord.body)\n      ) {\n        // console.log('CHANGE FROM '.green);\n        // console.log(JSON.stringify(this.map[path][method][index], null, \"  \"));\n        this.map[path][method][index] = new Record(record);\n        // console.log('CHANGE TO '.blue);\n        // console.log(JSON.stringify(this.map[path][method][index], null, \"  \"));\n        isChanged = true;\n      }\n    });\n    if (!isChanged) {\n      this.setRecord(this.map, record);\n    }\n    this.sortMap();\n    if (isLogEnabled) console.timeEnd(SET_NEW_REC);\n  }\n\n  /**\n   *\n   */\n  setRecord(map, record) {\n    let { method, path } = record.request;\n    if (!map[path]) map[path] = {};\n    if (!map[path][method]) map[path][method] = [];\n    map[path][method].push(new Record(record));\n  }\n\n  /**\n   *  Method to sort map\n   */\n  sortMap() {\n    Object.keys(this.map).forEach(path => {\n      let pathItem = this.map[path];\n      let gets = pathItem[methods.GET];\n      if (gets) {\n        gets.sort(compare);\n      }\n      let posts = pathItem[methods.POST];\n      if (posts) {\n        posts.sort(compare);\n      }\n      let puts = pathItem[methods.PUT];\n      if (puts) {\n        puts.sort(compare);\n      }\n      let deletes = pathItem[methods.DELETE];\n      if (deletes) {\n        deletes.sort(compare);\n      }\n      let patches = pathItem[methods.PATCH];\n      if (patches) {\n        patches.sort(compare);\n      }\n    });\n  }\n}\n\n/**\n * TODO: refactoring\n */\nfunction isQueryStringEqual(qs1, qs2) {\n  if ((qs1 && !qs2) || (!qs1 && qs2)) return false;\n  if (!qs1 && !qs2) return true;\n  if (qs1.length !== qs2.length) return false;\n  let isEqual = true;\n  let qs1ref = {};\n  let qs2ref = {};\n\n  qs1.forEach(item => {\n    qs1ref[item['name']] = item['values'];\n  });\n\n  qs2.forEach(item => {\n    qs2ref[item['name']] = item['values'];\n  });\n\n  Object.keys(qs1ref).forEach(name => {\n    let values = qs1ref[name];\n    let qs2Values = qs2ref[name];\n    if (qs2Values.length != values.length) {\n      isEqual = false;\n    } else {\n      values.forEach(value => {\n        if (qs2Values.indexOf(value) === -1) {\n          isEqual = false;\n        }\n      });\n    }\n  });\n  return isEqual;\n}\n\n/**\n *  Method to compare two requests for sorting by params count\n */\nfunction compare(a, b) {\n  if (!a.queryStringParameters && !b.queryStringParameters) return 0;\n  if (!a.queryStringParameters) return 1;\n  if (!b.queryStringParameters) return -1;\n  if (b.queryStringParameters.length != a.queryStringParameters.length)\n    return b.queryStringParameters.length - a.queryStringParameters.length;\n\n  // toto posledni pravidlo je kvuli obecnemu parametru, aby prevazili konkretni nad obecnym.   2 > .*\n  let aSpecificCount = 0;\n  let bSpecificCount = 0;\n  a.queryStringParameters.forEach((qs, index) => {\n    if (qs['values'].indexOf(REG_ALL) !== -1) aSpecificCount++;\n  });\n  b.queryStringParameters.forEach(qs => {\n    if (qs['values'].indexOf(REG_ALL) !== -1) bSpecificCount++;\n  });\n  return aSpecificCount - bSpecificCount;\n}\n"]}