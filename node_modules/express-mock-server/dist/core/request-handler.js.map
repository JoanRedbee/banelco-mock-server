{"version":3,"sources":["../../lib/core/request-handler.js"],"names":["APPLICATION_JSON","requestHandler","sourcesParser","req","res","method","path","route","definitions","getMap","response","matchedRecord","length","POST","GET","PUT","DELETE","PATCH","console","log","bgRed","white","bgBlue","yellow","query","body","status","send","end","params","headers","forEach","headerItem","setHeader","statusCode","type","delay","setTimeout"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;AAEA,MAAMA,mBAAmB,kBAAzB;;AAEO,MAAMC,0CAAiB,CAACC,aAAD,EAAgBC,GAAhB,EAAqBC,GAArB,KAA6B;AACzD,MAAIC,SAASF,IAAIE,MAAjB;AACA,MAAIC,OAAOH,IAAII,KAAJ,CAAUD,IAArB;AACA,MAAIE,cAAcN,cAAcO,MAAd,GAAuBH,IAAvB,EAA6BD,MAA7B,CAAlB;;AAEA;AACA;;AAEA,MAAIK,WAAW,IAAf;AACA,MAAIC,gBAAgB,IAApB;;AAEA,MAAIH,YAAYI,MAAZ,KAAuB,CAA3B,EAA8B;AAC5BD,oBAAgBH,YAAY,CAAZ,CAAhB;AACAE,eAAWC,cAAcD,QAAzB;AACD,GAHD,MAGO;AACL,YAAQL,MAAR;AACE,WAAK,mBAAQQ,IAAb;AAAmB;AACjBF,0BAAgB,sCAAgBR,GAAhB,EAAqBK,WAArB,CAAhB;AACA;AACD;;AAED,WAAK,mBAAQM,GAAb;AACA,WAAK,mBAAQC,GAAb;AACA,WAAK,mBAAQC,MAAb;AACA,WAAK,mBAAQC,KAAb;AACA;AAAS;AACPN,0BAAgB,oCAAeR,GAAf,EAAoBK,WAApB,CAAhB;AACD;AAZH;;AAeA,QAAIG,kBAAkB,IAAtB,EAA4B;AAC1BD,iBAAWC,cAAcD,QAAzB;AACD;;AAED,QAAIA,aAAa,IAAjB,EAAuB;AACrBQ,cAAQC,GAAR,CAAY,2BAA2BC,KAA3B,CAAiCC,KAA7C;AACAH,cAAQC,GAAR,CAAY,+CAA+CG,MAA/C,CAAsDD,KAAlE;AACAH,cAAQC,GAAR,CAAa,UAASd,MAAO,YAAWC,IAAK,EAA7C;AACAY,cAAQC,GAAR,CAAY,QAAQI,MAApB;AACAL,cAAQC,GAAR,CAAYhB,IAAIqB,KAAhB;AACAN,cAAQC,GAAR,CAAY,OAAOI,MAAnB;AACAL,cAAQC,GAAR,CAAYhB,IAAIsB,IAAhB;AACAP,cAAQC,GAAR,CAAY,SAASI,MAArB;AACA;AACAnB,UACGsB,MADH,6BAEGC,IAFH,CAEQ,mDAFR,EAGGC,GAHH;AAIA;AACD;AACF;;AAED,MAAI,uBAAWlB,QAAX,CAAJ,EAA0B;AACxBA,eAAWA,SAASP,IAAI0B,MAAb,EAAqB1B,IAAIqB,KAAzB,EAAgCrB,IAAIsB,IAApC,CAAX;AACD;;AAED,MAAI,CAAC,CAACf,SAASoB,OAAf,EAAwB;AACtBpB,aAASoB,OAAT,CAAiBC,OAAjB,CAAyBC,cAAc;AACrC5B,UAAI6B,SAAJ,CAAcD,WAAW,MAAX,CAAd,EAAkCA,WAAW,QAAX,EAAqB,CAArB,CAAlC;AACD,KAFD;AAGD;;AAED5B,MAAIsB,MAAJ,CAAWhB,SAASwB,UAApB,EAAgCC,IAAhC,CAAqCnC,gBAArC;;AAEA,MAAIU,SAAS0B,KAAb,EAAoB;AAClBC,eAAW,MAAM;AACfjC,UAAIuB,IAAJ,CAASjB,SAASe,IAAlB;AACD,KAFD,EAEGf,SAAS0B,KAFZ;AAGD,GAJD,MAIO;AACLhC,QAAIuB,IAAJ,CAASjB,SAASe,IAAlB;AACD;AACF,CAvEM","file":"request-handler.js","sourcesContent":["import { NOT_FOUND } from 'http-status-codes';\nimport { methods } from './../constants';\nimport { isFunction } from './utils';\nimport { matchRecordPost } from './matchers/http-post-matcher';\nimport { matchRecordGet } from './matchers/http-get-matcher';\n\nconst APPLICATION_JSON = 'application/json';\n\nexport const requestHandler = (sourcesParser, req, res) => {\n  let method = req.method;\n  let path = req.route.path;\n  let definitions = sourcesParser.getMap()[path][method];\n\n  // console.log(method);\n  // console.log(req.body);\n\n  let response = null;\n  let matchedRecord = null;\n\n  if (definitions.length === 1) {\n    matchedRecord = definitions[0];\n    response = matchedRecord.response;\n  } else {\n    switch (method) {\n      case methods.POST: {\n        matchedRecord = matchRecordPost(req, definitions);\n        break;\n      }\n\n      case methods.GET:\n      case methods.PUT:\n      case methods.DELETE:\n      case methods.PATCH:\n      default: {\n        matchedRecord = matchRecordGet(req, definitions);\n      }\n    }\n\n    if (matchedRecord !== null) {\n      response = matchedRecord.response;\n    }\n\n    if (response === null) {\n      console.log('ERR no reaponse but why?'.bgRed.white);\n      console.log('I know this URL but no match for parameters.'.bgBlue.white);\n      console.log(`method ${method}    path ${path}`);\n      console.log('QUERY'.yellow);\n      console.log(req.query);\n      console.log('BODY'.yellow);\n      console.log(req.body);\n      console.log('bundle'.yellow);\n      // myLog(bundle);\n      res\n        .status(NOT_FOUND)\n        .send('NOT FOUND - no reaponse but why? Look to console.')\n        .end();\n      return;\n    }\n  }\n\n  if (isFunction(response)) {\n    response = response(req.params, req.query, req.body);\n  }\n\n  if (!!response.headers) {\n    response.headers.forEach(headerItem => {\n      res.setHeader(headerItem['name'], headerItem['values'][0]);\n    });\n  }\n\n  res.status(response.statusCode).type(APPLICATION_JSON);\n\n  if (response.delay) {\n    setTimeout(() => {\n      res.send(response.body);\n    }, response.delay);\n  } else {\n    res.send(response.body);\n  }\n};\n"]}