'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.apiRecorder = exports.stopRecording = exports.startNewRecording = undefined;

var _v = require('uuid/v1');

var _v2 = _interopRequireDefault(_v);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const recordingStore = {};
let isRecordingActive = false;

const isNotRecordingApiPath = (apiUrl, path) => {
  return path.indexOf(`${apiUrl}/recording/`) === -1;
};

const startNewRecording = exports.startNewRecording = () => {
  const uuid = (0, _v2.default)();
  recordingStore[uuid] = [];
  isRecordingActive = true;
  return uuid;
};

const stopRecording = exports.stopRecording = uuid => {
  const recording = recordingStore[uuid];
  delete recordingStore[uuid];
  isRecordingActive = Object.keys(recordingStore).length > 0;
  return recording;
};

const apiRecorder = exports.apiRecorder = apiUrl => {
  return (req, res, next) => {
    if (isRecordingActive && isNotRecordingApiPath(apiUrl, req.path)) {
      const originalSend = res.send;
      res.send = function (body) {
        originalSend.call(this, body);

        Object.keys(recordingStore).forEach(recordUuid => {
          recordingStore[recordUuid].push({
            url: req.baseUrl,
            path: req.path,
            method: req.method,
            params: req.params,
            query: req.query,
            body: req.body,
            responseBody: !body ? {} : JSON.parse(body)
          });
        });
      };
    }

    next();
  };
};
//# sourceMappingURL=api-recorder.js.map