{"version":3,"sources":["../../../lib/api/recording/api-recorder.js"],"names":["recordingStore","isRecordingActive","isNotRecordingApiPath","apiUrl","path","indexOf","startNewRecording","uuid","stopRecording","recording","Object","keys","length","apiRecorder","req","res","next","originalSend","send","body","call","forEach","recordUuid","push","url","baseUrl","method","params","query","responseBody","JSON","parse"],"mappings":";;;;;;;AAAA;;;;;;AAEA,MAAMA,iBAAiB,EAAvB;AACA,IAAIC,oBAAoB,KAAxB;;AAEA,MAAMC,wBAAwB,CAACC,MAAD,EAASC,IAAT,KAAkB;AAC9C,SAAOA,KAAKC,OAAL,CAAc,GAAEF,MAAO,aAAvB,MAAyC,CAAC,CAAjD;AACD,CAFD;;AAIO,MAAMG,gDAAoB,MAAM;AACrC,QAAMC,OAAO,kBAAb;AACAP,iBAAeO,IAAf,IAAuB,EAAvB;AACAN,sBAAoB,IAApB;AACA,SAAOM,IAAP;AACD,CALM;;AAOA,MAAMC,wCAAgBD,QAAQ;AACnC,QAAME,YAAYT,eAAeO,IAAf,CAAlB;AACA,SAAOP,eAAeO,IAAf,CAAP;AACAN,sBAAoBS,OAAOC,IAAP,CAAYX,cAAZ,EAA4BY,MAA5B,GAAqC,CAAzD;AACA,SAAOH,SAAP;AACD,CALM;;AAOA,MAAMI,oCAAcV,UAAU;AACnC,SAAO,CAACW,GAAD,EAAMC,GAAN,EAAWC,IAAX,KAAoB;AACzB,QAAIf,qBAAqBC,sBAAsBC,MAAtB,EAA8BW,IAAIV,IAAlC,CAAzB,EAAkE;AAChE,YAAMa,eAAeF,IAAIG,IAAzB;AACAH,UAAIG,IAAJ,GAAW,UAASC,IAAT,EAAe;AACxBF,qBAAaG,IAAb,CAAkB,IAAlB,EAAwBD,IAAxB;;AAEAT,eAAOC,IAAP,CAAYX,cAAZ,EAA4BqB,OAA5B,CAAoCC,cAAc;AAChDtB,yBAAesB,UAAf,EAA2BC,IAA3B,CAAgC;AAC9BC,iBAAKV,IAAIW,OADqB;AAE9BrB,kBAAMU,IAAIV,IAFoB;AAG9BsB,oBAAQZ,IAAIY,MAHkB;AAI9BC,oBAAQb,IAAIa,MAJkB;AAK9BC,mBAAOd,IAAIc,KALmB;AAM9BT,kBAAML,IAAIK,IANoB;AAO9BU,0BAAc,CAACV,IAAD,GAAQ,EAAR,GAAaW,KAAKC,KAAL,CAAWZ,IAAX;AAPG,WAAhC;AASD,SAVD;AAWD,OAdD;AAeD;;AAEDH;AACD,GArBD;AAsBD,CAvBM","file":"api-recorder.js","sourcesContent":["import uuidv1 from 'uuid/v1';\n\nconst recordingStore = {};\nlet isRecordingActive = false;\n\nconst isNotRecordingApiPath = (apiUrl, path) => {\n  return path.indexOf(`${apiUrl}/recording/`) === -1;\n};\n\nexport const startNewRecording = () => {\n  const uuid = uuidv1();\n  recordingStore[uuid] = [];\n  isRecordingActive = true;\n  return uuid;\n};\n\nexport const stopRecording = uuid => {\n  const recording = recordingStore[uuid];\n  delete recordingStore[uuid];\n  isRecordingActive = Object.keys(recordingStore).length > 0;\n  return recording;\n};\n\nexport const apiRecorder = apiUrl => {\n  return (req, res, next) => {\n    if (isRecordingActive && isNotRecordingApiPath(apiUrl, req.path)) {\n      const originalSend = res.send;\n      res.send = function(body) {\n        originalSend.call(this, body);\n\n        Object.keys(recordingStore).forEach(recordUuid => {\n          recordingStore[recordUuid].push({\n            url: req.baseUrl,\n            path: req.path,\n            method: req.method,\n            params: req.params,\n            query: req.query,\n            body: req.body,\n            responseBody: !body ? {} : JSON.parse(body)\n          });\n        });\n      };\n    }\n\n    next();\n  };\n};\n"]}